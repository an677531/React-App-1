{"ast":null,"code":"var _jsxFileName = \"/Users/tony/Desktop/React Application/React-App-1/src/components/Sidebar.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useCallback } from \"react\";\n/**\n * Renders an array of strings passed in that can be filtered and added to as an\n * unordered list.\n * @returns Component\n */\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Sidebar() {\n  _s();\n  let [newMenuItem, setNewMenuItem] = useState(\"\");\n  // TODO: 2 Using a state hook, maintain the current menu items as an array state.\n  let [menuItems, setMenuItems] = useState(initialMenuItems);\n  let [filter, setFilter] = useState(\"\");\n  // Adds a single string passed in as parameter to the state element\n  // \"menuItems\" that holds the set of current menu items.\n  let addMenuItem = useCallback(() => {\n    console.log(\"Added menu item\");\n    //   // TODO: 3. Add a new menu item to the correct variable associated with this class.\n    //   // This involves adding a parameter and changing a class instance variable (props).\n    setMenuItems([newMenuItem, ...menuItems]);\n    setNewMenuItem(\"\");\n  }, [menuItems, newMenuItem]);\n\n  // TODO: 4. Display ONLY the menu items that contain the filter element value\n  // \"term\" in them. Each menu item should be an unordered list item wrapped in an unordered list (ul) element.\n\n  // TODO: 1 Render inside the outer div an unordered list of the menu items, with each string in the array\n  // its own item.\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      id: \"newMenuItemValue\",\n      value: newMenuItem,\n      onChange: event => setNewMenuItem(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: addMenuItem => {\n        /* TODO: 3 */\n      },\n      children: \"Add Item\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      id: \"filter\",\n      type: \"text\",\n      value: filter,\n      onChange: event => setFilter(event.target.value),\n      placeholder: \"Filter by...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: menuItems.filter(item => item.toLowerCase().includes(filter.toLowerCase())) // Filter items\n      .map((item, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 13\n      }, this) // Display filtered items\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n}\n_s(Sidebar, \"/oaa6lp+ngPTBrV4SYZja6S1wK0=\");\n_c = Sidebar;\nvar _c;\n$RefreshReg$(_c, \"Sidebar\");","map":{"version":3,"names":["useState","useCallback","jsxDEV","_jsxDEV","Sidebar","_s","newMenuItem","setNewMenuItem","menuItems","setMenuItems","initialMenuItems","filter","setFilter","addMenuItem","console","log","children","type","id","value","onChange","event","target","fileName","_jsxFileName","lineNumber","columnNumber","onClick","placeholder","item","toLowerCase","includes","map","index","_c","$RefreshReg$"],"sources":["/Users/tony/Desktop/React Application/React-App-1/src/components/Sidebar.jsx"],"sourcesContent":["import { useState, useCallback } from \"react\"\n/**\n * Renders an array of strings passed in that can be filtered and added to as an\n * unordered list.\n * @returns Component\n */\nexport default function Sidebar() {\n  let [newMenuItem, setNewMenuItem] = useState(\"\")\n  // TODO: 2 Using a state hook, maintain the current menu items as an array state.\n  let [menuItems, setMenuItems] = useState(initialMenuItems)\n  let [filter, setFilter] = useState(\"\")\n  // Adds a single string passed in as parameter to the state element\n  // \"menuItems\" that holds the set of current menu items.\n  let addMenuItem = useCallback(() => {\n    console.log(\"Added menu item\")\n    //   // TODO: 3. Add a new menu item to the correct variable associated with this class.\n    //   // This involves adding a parameter and changing a class instance variable (props).\n    setMenuItems([newMenuItem, ...menuItems])\n    setNewMenuItem(\"\")\n  }, [menuItems, newMenuItem])\n\n  // TODO: 4. Display ONLY the menu items that contain the filter element value\n  // \"term\" in them. Each menu item should be an unordered list item wrapped in an unordered list (ul) element.\n\n  // TODO: 1 Render inside the outer div an unordered list of the menu items, with each string in the array\n  // its own item.\n  return (\n    <div>\n      <input\n        type=\"text\"\n        id=\"newMenuItemValue\"\n        value={newMenuItem}\n        onChange={(event) => setNewMenuItem(event.target.value)}\n      ></input>\n      <br />\n      <button\n        onClick={(addMenuItem) => {\n          /* TODO: 3 */\n        }}\n      >\n        Add Item\n      </button>\n      <br />\n      <input\n        id=\"filter\"\n        type=\"text\"\n        value={filter}\n        onChange={(event) => setFilter(event.target.value)}\n        placeholder=\"Filter by...\"\n      ></input>\n      <ul>\n        {menuItems\n          .filter((item) => item.toLowerCase().includes(filter.toLowerCase())) // Filter items\n          .map((item, index) => (\n            <li key={index}>{item}</li> // Display filtered items\n          ))}\n      </ul>\n    </div>\n  )\n}\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAC7C;AACA;AACA;AACA;AACA;AAJA,SAAAC,MAAA,IAAAC,OAAA;AAKA,eAAe,SAASC,OAAOA,CAAA,EAAG;EAAAC,EAAA;EAChC,IAAI,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAChD;EACA,IAAI,CAACQ,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAACU,gBAAgB,CAAC;EAC1D,IAAI,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EACtC;EACA;EACA,IAAIa,WAAW,GAAGZ,WAAW,CAAC,MAAM;IAClCa,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;IAC9B;IACA;IACAN,YAAY,CAAC,CAACH,WAAW,EAAE,GAAGE,SAAS,CAAC,CAAC;IACzCD,cAAc,CAAC,EAAE,CAAC;EACpB,CAAC,EAAE,CAACC,SAAS,EAAEF,WAAW,CAAC,CAAC;;EAE5B;EACA;;EAEA;EACA;EACA,oBACEH,OAAA;IAAAa,QAAA,gBACEb,OAAA;MACEc,IAAI,EAAC,MAAM;MACXC,EAAE,EAAC,kBAAkB;MACrBC,KAAK,EAAEb,WAAY;MACnBc,QAAQ,EAAGC,KAAK,IAAKd,cAAc,CAACc,KAAK,CAACC,MAAM,CAACH,KAAK;IAAE;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAClD,CAAC,eACTvB,OAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNvB,OAAA;MACEwB,OAAO,EAAGd,WAAW,IAAK;QACxB;MAAA,CACA;MAAAG,QAAA,EACH;IAED;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACTvB,OAAA;MAAAoB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACNvB,OAAA;MACEe,EAAE,EAAC,QAAQ;MACXD,IAAI,EAAC,MAAM;MACXE,KAAK,EAAER,MAAO;MACdS,QAAQ,EAAGC,KAAK,IAAKT,SAAS,CAACS,KAAK,CAACC,MAAM,CAACH,KAAK,CAAE;MACnDS,WAAW,EAAC;IAAc;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpB,CAAC,eACTvB,OAAA;MAAAa,QAAA,EACGR,SAAS,CACPG,MAAM,CAAEkB,IAAI,IAAKA,IAAI,CAACC,WAAW,CAAC,CAAC,CAACC,QAAQ,CAACpB,MAAM,CAACmB,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;MAAA,CACpEE,GAAG,CAAC,CAACH,IAAI,EAAEI,KAAK,kBACf9B,OAAA;QAAAa,QAAA,EAAiBa;MAAI,GAAZI,KAAK;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAY,CAAC,CAAC;MAC7B;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACrB,EAAA,CArDuBD,OAAO;AAAA8B,EAAA,GAAP9B,OAAO;AAAA,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}